
spring.datasource.url=jdbc:postgresql://localhost:5432/cleaning
spring.datasource.username=postgres
spring.datasource.password=admin
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.datasource.data=classpath*:/data.sql
# VIEW RESOLVER
#spring.mvc.view.prefix=/
#spring.mvc.view.suffix=.html
### MAILING ###
spring.mail.protocol=smtps
spring.mail.host=smtp.mail.ru
spring.mail.port=465
spring.mail.username=!!!!!!!!!
spring.mail.password=!!!!!!!!!
mail.smtps.auth=true
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR


security.oauth2.client.client-id=cleaning-app
security.oauth2.client.client-secret=secret
security.oauth2.resource.filter-order = 3

# SECURITY OAUTH2 RESOURCES (ResourceServerProperties)
security.oauth2.resource.id=oauth2_id
security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.
security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.
security.oauth2.resource.jwk.key-set-uri= # The URI for getting the set of keys that can be used to validate the token.
security.oauth2.resource.service-id=resource #
security.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.
security.oauth2.resource.token-type= # The token type to send when using the userInfoUri.
security.oauth2.resource.user-info-uri= # URI of the user endpoint.

# SECURITY OAUTH2 SSO (OAuth2SsoProperties)
security.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server